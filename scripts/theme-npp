#!/usr/bin/env python3

"""
Copies the NotePad++ themes from the Catppuccin repo
to my dotfiles symlinks with necessary font modifications.
https://github.com/jack-mil/dotfiles

This was required while NPP themes were under heavy development (by me)
Windows only.
"""

import shutil
from pathlib import Path
from argparse import ArgumentParser
import re
import sys

# Can be changed with cli args
FONT_NAME = "Cascadia Code NF"
FLAVOR = "macchiato"

DOTFILE_DIR = Path(__file__).resolve().parent.parent / "notepad++"
# DOTFILE_DIR = Path(r"C:\Users\jackmil\AppData\Roaming\Notepad++")
# DOTFILE_DIR = Path.home() / r"scoop/apps/notepadplusplus/current"

THEME_DIR = Path.home() / "Repos/notepad-plus-plus"

FLAVORS = ("frappe", "latte", "macchiato", "mocha")

# GLOBAL_RE = re.compile(
#     r'(<WidgetStyle name="Global Override" [^>]*fontName=")[^"]*(")', re.IGNORECASE
# )
DEFAULT_RE = re.compile(
    r'(<WidgetStyle name="Default Style" [^>]*fontName=")[^"]*(")', re.IGNORECASE
)
DARK_THEME_RE_STR = r'(<GUIConfig name="DarkMode" [^>]*darkThemeName="catppuccin-{}\.xml" [^>]*\/>)'  # needs configuration at runtime
CONFIG_RE = re.compile(r'(<GUIConfig name="DarkMode" [^>]*\/>)', re.IGNORECASE)


def parse_args():
    parser = ArgumentParser()
    parser.add_argument(
        "-t", "--flavor", default=FLAVOR, choices=FLAVORS, required=False
    )
    parser.add_argument("--font", default=FONT_NAME, required=False)
    args = parser.parse_args()
    return args


def copy_files(source_file: Path, dest_file: Path):
    # Check if the source file exists
    if not source_file.is_file():
        raise FileNotFoundError(f"Source file does not exist: {source_file}")

    if not dest_file.parent.exists():
        print(
            f"Destination directory does not exist: {dest_file.parent}",
            "Creating it anyways...",
            sep="\n",
            file=sys.stderr,
        )
        dest_file.parent.mkdir(parents=True, exist_ok=True)
    # Create destination directory if it does not exist

    shutil.copy2(source_file, dest_file)


def import_theme(source_file: Path, dest_file: Path, font: str):
    """Copy the theme files into Npp config directory, and find/replace default font"""

    copy_files(source_file, dest_file)

    # content = GLOBAL_RE.sub(r"\1\2", content)
    # Regex to find and replace fontName attributes
    with dest_file.open("r") as file:
        content = file.read()
    content = DEFAULT_RE.sub(f"\\1{font}\\2", content)

    # Write the modified content back to the copied file
    dest_file.write_text(content)

    print(
        f"~\\{source_file.relative_to(Path.home())} -> ~\\{dest_file.relative_to(Path.home())}"
    )


def set_ui_colors(src_file: Path, dest_file: Path, flavor: str):
    """Extract desired UI config from repo, and insert into Npp config.xml file"""
    with src_file.open("r") as file:
        content = file.read()

    # REGEX to pull the desired darkmode config from CTP repo
    regex = re.compile(DARK_THEME_RE_STR.format(flavor))
    config = regex.search(content)
    if config is None:
        raise ValueError(f"Could not find dark mode definition in {src_file}")

    if not dest_file.exists():
        raise FileNotFoundError(
            "Notepad++ config.xml not found. "
            "Make sure to run once to generate the default.",
        )

    with dest_file.open("r") as file:
        content = file.read()
        content = CONFIG_RE.sub(config.group(), content)

    dest_file.write_text(content)

    print(f'Added "{flavor}" dark mode ui config')


def main():
    args = parse_args()

    # Copy all flavors to be available
    for flavor in FLAVORS:
        filename = f"catppuccin-{flavor}.xml"
        src_path = THEME_DIR / "themes" / filename
        dest_path = DOTFILE_DIR / "themes" / filename
        import_theme(src_path, dest_path, args.font)

    print("Copied theme files")

    theme_ui = THEME_DIR / "ui-theme.md"
    config_file = DOTFILE_DIR / "config.xml"

    # set the darkmode theme to a specific flavor
    set_ui_colors(theme_ui, config_file, args.flavor)


if __name__ == "__main__":
    main()
